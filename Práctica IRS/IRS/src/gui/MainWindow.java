/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import text.DocsReader;
import text.Index;
import text.TextPreprocessing;

/**
 * Main graphic app to use the searcher.
 * 
 * @author Lidia Sánchez Mérida.
 */
public class MainWindow extends javax.swing.JFrame {
    /**
     * Path to the folder which contains the doc collection.
     */
    private static String collectionPath = "";
    /**
     * Path to the folder which contains the stop words file.
     */
    private static String stopwordsPath = "";
    /**
     * Path to the folder which will contain the index files.
     */
    private static String indexPath = "";
    
    /**
     * Filter to choose a txt file which contains the stop words.
     */
    private final FileNameExtensionFilter stopwordsFileFilter = 
        new FileNameExtensionFilter("Text files [txt]", "txt");
    
    /**
     * Reader object to read the doc collection.
     */
    private static DocsReader reader;
    /**
     * Array of the preprocessed doc collection.
     */
    private static ArrayList<String> preprocessedDocs;
    /**
     * Array of the preprocessed titles of the doc collection.
     */
    private static ArrayList<String> preprocessedTitles;
    /**
     * Index object to create an index and send queries.
     */
    private static Index index;
    /**
     * Ranking.
     */
    private static ArrayList<Integer> ranking;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setTitle("Information Retrieval System");
        // Full screen
        this.setExtendedState(MAXIMIZED_BOTH);
        this.createIndexOption.setEnabled(false);
        this.titleSearchType.setEnabled(false);
        this.textSearchType.setEnabled(false);
        this.textSearchType.setSelected(true);
        this.titleSearchType.setSelected(false);
    }
    /**
     * Dialog to choose a specific directory. It will be used to choose the 
     * folder of the doc collection and the index.
     * @return the path of the chosen directory.
     */
    private String chooseDirectory() {
        String path = "";
        // Dialog to choose the directory
        JFileChooser dlg = new JFileChooser();
        // Only directories
        dlg.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY);
        // Open the dialog
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            // Get the selected directory
            File directory = dlg.getSelectedFile();
            path = directory.toString();
        }
        return path;
    }
    /**
     * Dialog to choose a text files. It will be used to choose the stop words file.
     * @return path to the selected file.
     */
    private String chooseFile() {
        String path = "";
        // Dialog to choose the directory
        JFileChooser dlg = new JFileChooser();
        // Only text files
        dlg.setFileFilter(stopwordsFileFilter);
        // Open the dialog
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            // Get the selected stop words file
            File file = dlg.getSelectedFile();
            path = file.toString();
            // Check the file extension
            int point = file.getName().lastIndexOf('.');
            String extension = file.getName().substring(point+1);
            if (stopwordsFileFilter.toString().contains(extension)) {
                path = file.toString();
            }
        }
        return path;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDialog = new javax.swing.JDialog();
        aboutScreen = new javax.swing.JPanel();
        helpTitle = new javax.swing.JLabel();
        help21 = new javax.swing.JLabel();
        help12 = new javax.swing.JLabel();
        help13 = new javax.swing.JLabel();
        help14 = new javax.swing.JLabel();
        help15 = new javax.swing.JLabel();
        helpOption2 = new javax.swing.JLabel();
        helpOption1 = new javax.swing.JLabel();
        help11 = new javax.swing.JLabel();
        help22 = new javax.swing.JLabel();
        help16 = new javax.swing.JLabel();
        help17 = new javax.swing.JLabel();
        helpOption3 = new javax.swing.JLabel();
        help18 = new javax.swing.JLabel();
        help19 = new javax.swing.JLabel();
        lowerToolbar = new javax.swing.JPanel();
        stateToolbar = new javax.swing.JLabel();
        showOutput = new javax.swing.JLabel();
        outputPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        searcher = new javax.swing.JTextField();
        scrollPaneResultList = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        scrollPaneText = new javax.swing.JScrollPane();
        bookText = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        setDocsOption = new javax.swing.JMenuItem();
        setStopwordsOption = new javax.swing.JMenuItem();
        setIndexOption = new javax.swing.JMenuItem();
        docMenu = new javax.swing.JMenu();
        createIndexOption = new javax.swing.JMenuItem();
        searchMenu = new javax.swing.JMenu();
        textSearchType = new javax.swing.JCheckBoxMenuItem();
        titleSearchType = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutOption = new javax.swing.JMenuItem();

        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setMinimumSize(new java.awt.Dimension(400, 350));
        aboutDialog.setModal(true);

        aboutScreen.setBackground(new java.awt.Color(234, 234, 234));

        helpTitle.setFont(new java.awt.Font("aakar", 1, 20)); // NOI18N
        helpTitle.setForeground(new java.awt.Color(92, 92, 92));
        helpTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpTitle.setText("USER MANUAL");

        help21.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help21.setForeground(new java.awt.Color(109, 109, 120));
        help21.setText("3. Select the folders which contains index files.");

        help12.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help12.setForeground(new java.awt.Color(109, 109, 120));
        help12.setText("2. Select the directory which contains the stop words file.");

        help13.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help13.setForeground(new java.awt.Color(109, 109, 120));
        help13.setText("3. Select the directory in which the index will be stored.");

        help14.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help14.setForeground(new java.awt.Color(109, 109, 120));
        help14.setText("4. Now you can read the collection and create the index.");

        help15.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help15.setForeground(new java.awt.Color(109, 109, 120));
        help15.setText("5. If everything went well, then you can use the search engine.");

        helpOption2.setFont(new java.awt.Font("aakar", 1, 18)); // NOI18N
        helpOption2.setForeground(new java.awt.Color(109, 109, 120));
        helpOption2.setText("Use a created index.");

        helpOption1.setFont(new java.awt.Font("aakar", 1, 18)); // NOI18N
        helpOption1.setForeground(new java.awt.Color(109, 109, 120));
        helpOption1.setText("Create a new index from a doc collection.");

        help11.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help11.setForeground(new java.awt.Color(109, 109, 120));
        help11.setText("1. Select the folder which contains the doc collection to read.");

        help22.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help22.setForeground(new java.awt.Color(109, 109, 120));
        help22.setText("4. And now you can use the search engine.");

        help16.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help16.setForeground(new java.awt.Color(109, 109, 120));
        help16.setText("1. Select the folder which contains the doc collection to read.");

        help17.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help17.setForeground(new java.awt.Color(109, 109, 120));
        help17.setText("2. Select the directory which contains the stop words file.");

        helpOption3.setFont(new java.awt.Font("aakar", 1, 18)); // NOI18N
        helpOption3.setForeground(new java.awt.Color(109, 109, 120));
        helpOption3.setText("Search types.");

        help18.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help18.setForeground(new java.awt.Color(109, 109, 120));
        help18.setText("1. You can search for the title of the book.");

        help19.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        help19.setForeground(new java.awt.Color(109, 109, 120));
        help19.setText("2. Or you can search for the entire book.");

        javax.swing.GroupLayout aboutScreenLayout = new javax.swing.GroupLayout(aboutScreen);
        aboutScreen.setLayout(aboutScreenLayout);
        aboutScreenLayout.setHorizontalGroup(
            aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutScreenLayout.createSequentialGroup()
                .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(helpTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(helpOption1)
                            .addComponent(helpOption2)
                            .addGroup(aboutScreenLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(help11)
                                    .addComponent(help12)
                                    .addComponent(help13)
                                    .addComponent(help14)
                                    .addComponent(help15)))))
                    .addGroup(aboutScreenLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(help22)
                            .addComponent(help21)
                            .addComponent(help16)
                            .addComponent(help17)))
                    .addGroup(aboutScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(helpOption3)
                            .addGroup(aboutScreenLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(help18)
                                    .addComponent(help19))))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        aboutScreenLayout.setVerticalGroup(
            aboutScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helpTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpOption1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(help11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help12, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help13, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help14, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help15, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(helpOption2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(help16, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help17, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help21, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help22, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpOption3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(help18, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(help19, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aboutDialog.getContentPane().add(aboutScreen, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lowerToolbar.setMaximumSize(new java.awt.Dimension(32767, 70));
        lowerToolbar.setPreferredSize(new java.awt.Dimension(1439, 70));

        stateToolbar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        showOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showOutputMousePressed(evt);
            }
        });

        javax.swing.GroupLayout lowerToolbarLayout = new javax.swing.GroupLayout(lowerToolbar);
        lowerToolbar.setLayout(lowerToolbarLayout);
        lowerToolbarLayout.setHorizontalGroup(
            lowerToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerToolbarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lowerToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stateToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                    .addGroup(lowerToolbarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(showOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        lowerToolbarLayout.setVerticalGroup(
            lowerToolbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerToolbarLayout.createSequentialGroup()
                .addComponent(showOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stateToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(lowerToolbar, java.awt.BorderLayout.PAGE_END);

        outputPanel.setLayout(new java.awt.BorderLayout());

        title.setBackground(new java.awt.Color(254, 254, 254));
        title.setFont(new java.awt.Font("Abyssinica SIL", 0, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("DOC SEARCH ENGINE");
        outputPanel.add(title, java.awt.BorderLayout.PAGE_START);

        searcher.setFont(new java.awt.Font("aakar", 0, 18)); // NOI18N
        searcher.setText("Search...");
        searcher.setToolTipText("");
        searcher.setPreferredSize(new java.awt.Dimension(50, 33));
        searcher.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searcherFocusGained(evt);
            }
        });
        searcher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searcherActionPerformed(evt);
            }
        });
        outputPanel.add(searcher, java.awt.BorderLayout.PAGE_END);

        scrollPaneResultList.setPreferredSize(new java.awt.Dimension(500, 130));

        resultList.setAlignmentX(50.0F);
        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultListMouseClicked(evt);
            }
        });
        scrollPaneResultList.setViewportView(resultList);

        outputPanel.add(scrollPaneResultList, java.awt.BorderLayout.LINE_START);

        bookText.setColumns(20);
        bookText.setRows(5);
        scrollPaneText.setViewportView(bookText);

        outputPanel.add(scrollPaneText, java.awt.BorderLayout.CENTER);

        getContentPane().add(outputPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        setDocsOption.setText("Documents");
        setDocsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDocsOptionActionPerformed(evt);
            }
        });
        fileMenu.add(setDocsOption);

        setStopwordsOption.setText("Stop words");
        setStopwordsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStopwordsOptionActionPerformed(evt);
            }
        });
        fileMenu.add(setStopwordsOption);

        setIndexOption.setText("Index");
        setIndexOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIndexOptionActionPerformed(evt);
            }
        });
        fileMenu.add(setIndexOption);

        menu.add(fileMenu);

        docMenu.setText("Documents");

        createIndexOption.setText("Create index");
        createIndexOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createIndexOptionActionPerformed(evt);
            }
        });
        docMenu.add(createIndexOption);

        menu.add(docMenu);

        searchMenu.setText("Search");

        textSearchType.setSelected(true);
        textSearchType.setText("Text search");
        textSearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSearchTypeActionPerformed(evt);
            }
        });
        searchMenu.add(textSearchType);

        titleSearchType.setSelected(true);
        titleSearchType.setText("Title search");
        titleSearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleSearchTypeActionPerformed(evt);
            }
        });
        searchMenu.add(titleSearchType);

        menu.add(searchMenu);

        helpMenu.setText("Help");

        aboutOption.setText("About");
        aboutOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutOptionActionPerformed(evt);
            }
        });
        helpMenu.add(aboutOption);

        menu.add(helpMenu);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setDocsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDocsOptionActionPerformed
        // TODO add your handling code here:
        collectionPath = chooseDirectory();  
        this.stateToolbar.setText(" Path to the doc collection has been set.");
        if (!"".equals(collectionPath)) {
            collectionPath += "/";
            reader = new DocsReader(collectionPath);
            // Read the doc collection.
            try {
                reader.readGutenbergDocs();
                this.stateToolbar.setText(" Doc collection have been read.");
            } catch (IOException ex) {
                this.stateToolbar.setText(" ERROR. Doc collection couldn't be read.");
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
            JOptionPane.showMessageDialog(
                null, "You have to choose a directory with the doc collection.",
                "ERROR READING DOC COLLECTION", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_setDocsOptionActionPerformed

    private void setStopwordsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStopwordsOptionActionPerformed
        // TODO add your handling code here:
        stopwordsPath = chooseFile();
        this.stateToolbar.setText(" Path to the stop words file has been set.");
    }//GEN-LAST:event_setStopwordsOptionActionPerformed

    private void setIndexOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIndexOptionActionPerformed
        // TODO add your handling code here:
        indexPath = chooseDirectory(); 
        // Create the index object
        index = new Index(indexPath);
        this.stateToolbar.setText(" Path to the index has been set.");
        this.createIndexOption.setEnabled(true);
        this.textSearchType.setEnabled(true);
        this.titleSearchType.setEnabled(true);
    }//GEN-LAST:event_setIndexOptionActionPerformed

    private void showOutputMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showOutputMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_showOutputMousePressed

    private void aboutOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutOptionActionPerformed
        // TODO add your handling code here:
        this.aboutDialog.setSize(550, 500);
        this.aboutDialog.setTitle("Help");
        // Set the dialog window in the middle of the screen
        this.aboutDialog.setLocationRelativeTo(null);
        this.aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutOptionActionPerformed

    private void createIndexOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createIndexOptionActionPerformed
        // TODO add your handling code here:
        // Check the path to the stop words file and to the index
        if (!"".equals(stopwordsPath) && !"".equals(indexPath)) {
            // Check if the docs have been read
            if (!reader.getDocsTexts().isEmpty() && reader.getDocsTexts() != null) {
                // Preprocessed the doc collection
                TextPreprocessing preproc = new TextPreprocessing();
                try {
                    preprocessedDocs = preproc.docPreprocessing(stopwordsPath, reader.getDocsTexts());
                    preprocessedTitles = preproc.docPreprocessing(stopwordsPath, reader.getDocsTitles());
                    this.stateToolbar.setText(" Doc collection have been preprocessed.");
                    // Creating index               
                    index.createIndex(preprocessedDocs, preprocessedTitles);
                    this.stateToolbar.setText(" Index has been created.");
                } catch (Exception ex) {
                    this.stateToolbar.setText(" ERROR. Index couldn't be created.");
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            JOptionPane.showMessageDialog(
                null, "You have to read the doc collection first.",
                "ERROR FINDING THE DOC COLLECTION", JOptionPane.ERROR_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(
                null, "You have to choose the stop words file and the path to save the index.",
                "ERROR PREPROCESSING THE DOC COLLECTION", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_createIndexOptionActionPerformed

    private void searcherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searcherActionPerformed
        // TODO add your handling code here:
        if (!"".equals(stopwordsPath) && !reader.getDocsTexts().isEmpty()
            && reader.getDocsTexts() != null && (textSearchType.isSelected() || titleSearchType.isSelected())) {
            // Get the query
            String originalQuery = this.searcher.getText();
            // Preprocess the query
            TextPreprocessing preproc = new TextPreprocessing();
            try {
                String preprocQuery = preproc.queryPreprocessing(stopwordsPath, originalQuery);
                System.out.println("QUERY: " + preprocQuery);
                preprocessedTitles = preproc.docPreprocessing(stopwordsPath, reader.getDocsTitles());
                ranking = index.searchInIndex(preprocQuery, preprocessedTitles, titleSearchType.isSelected());
                // Show the ranking
                DefaultListModel bookList = new DefaultListModel();
                for (int i=0; i<ranking.size(); i++) {
                    bookList.add(i, reader.getDocsTitles().get(ranking.get(i)));
                }
                resultList.setModel(bookList);
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        else
        JOptionPane.showMessageDialog(
            null, "You have to select the stop words file and read the doc collection.",
            "ERROR SEARCHING", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_searcherActionPerformed

    private void resultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseClicked
        // TODO add your handling code here:
        int selectedBook = resultList.getSelectedIndex();
        this.bookText.setText(reader.getDocsTexts().get(ranking.get(selectedBook)));
        // Set the scroll pane at the beginning of the doc
        bookText.setCaretPosition(0);
        this.scrollPaneText.setViewportView(bookText);        
    }//GEN-LAST:event_resultListMouseClicked

    private void textSearchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSearchTypeActionPerformed
        // TODO add your handling code here:
        this.titleSearchType.setSelected(!this.textSearchType.isSelected());
    }//GEN-LAST:event_textSearchTypeActionPerformed

    private void titleSearchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleSearchTypeActionPerformed
        // TODO add your handling code here:
        this.textSearchType.setSelected(!this.titleSearchType.isSelected());
    }//GEN-LAST:event_titleSearchTypeActionPerformed

    private void searcherFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searcherFocusGained
        // TODO add your handling code here:
        if ("Search...".equals(this.searcher.getText())) this.searcher.setText("");
    }//GEN-LAST:event_searcherFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JMenuItem aboutOption;
    private javax.swing.JPanel aboutScreen;
    private javax.swing.JTextArea bookText;
    private javax.swing.JMenuItem createIndexOption;
    private javax.swing.JMenu docMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel help11;
    private javax.swing.JLabel help12;
    private javax.swing.JLabel help13;
    private javax.swing.JLabel help14;
    private javax.swing.JLabel help15;
    private javax.swing.JLabel help16;
    private javax.swing.JLabel help17;
    private javax.swing.JLabel help18;
    private javax.swing.JLabel help19;
    private javax.swing.JLabel help21;
    private javax.swing.JLabel help22;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel helpOption1;
    private javax.swing.JLabel helpOption2;
    private javax.swing.JLabel helpOption3;
    private javax.swing.JLabel helpTitle;
    private javax.swing.JPanel lowerToolbar;
    private javax.swing.JMenuBar menu;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JList<String> resultList;
    private javax.swing.JScrollPane scrollPaneResultList;
    private javax.swing.JScrollPane scrollPaneText;
    private javax.swing.JMenu searchMenu;
    private javax.swing.JTextField searcher;
    private javax.swing.JMenuItem setDocsOption;
    private javax.swing.JMenuItem setIndexOption;
    private javax.swing.JMenuItem setStopwordsOption;
    private javax.swing.JLabel showOutput;
    private javax.swing.JLabel stateToolbar;
    private javax.swing.JCheckBoxMenuItem textSearchType;
    private javax.swing.JLabel title;
    private javax.swing.JCheckBoxMenuItem titleSearchType;
    // End of variables declaration//GEN-END:variables
}
